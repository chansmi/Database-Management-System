END
From PubMed.SubmissionDate;" )
dbExecute(dbcon,
" CREATE TABLE starschema.ArticlesPerJournal (
FactTabledim_key INT,
Publisheddim_Key INT,
CONSTRAINT PRIMARY KEY (FactTabledim_key, Publisheddim_Key )
);" )
Season <- sqldf( "
SELECT Month, ISSN as ISSN,
CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END
From JournalPubDF
Group BY ISSN;")
FactTableDF$Season <- Season$`CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END`
FactTableDF <-FactTableDF[!(FactTableDF$dateDiscrepency<0 | FactTableDF$dateDiscrepency==0),]
FactTableDF
SeasonToPublish <- sqldf( "
SELECT Season, Count(Season)
From FactTableDF
Group BY Season;")
SeasonToPublish
ggplot(data=FactTableDF, aes(x=Season, y=dateDiscrepency, group=1)) +
geom_line(color="red")+
geom_point() +
labs(x = "Season", y = "Days Elapsed") +
labs(title = "Publications Through the Seasons")
library(XML)
library(DBI)
library(knitr)
library(sqldf)
library(RMariaDB)
library(tidyverse)
library(methods)
library(lubridate)
library(sqldf)
library(magrittr)
library(ggplot2)
knitr::include_graphics("https://imgur.com/a/l3P3Gcg")
localuserpassword <- "SomethingDifficult"
dbcon <- dbConnect(RMariaDB::MariaDB(), user='PubMed_user', password=localuserpassword, dbname='pubmed', host='localhost')
remove(JournalPubDF, JournalDF, Affiliation.DF, AuthorDF, AffJoinDF, SubmissionDateDF, ArticleDF, AuthJoinDF)
remove(Affiliation, Affiliation.df, AffiliationIntermediate, AffJoin.df, Article.df, ArticleIntermediate, AsList, AuthJoin.df, author, Author.df, Authors, Journal.df, JournalIntermediate, JournalNode, JournalPub.df, JournalPubDate, JournalTest, MedlineCitation.df, PMID, Pubdate, PubDate.df, PubDateIntermediate, temp1, test)
JournalPubDF <- data.frame( PubId = integer(),
Month = integer(),
Year = integer(),
DayNum = integer(),
ISSN = character(),
stringsAsFactors = F)
JournalDF <- data.frame ( jID = character(),
ISSN = character(),
Volume = integer(),
Issue = integer(),
PubDate = character(),
JournalTitle = character(),
stringsAsFactors = F)
AffiliationDF <- data.frame (fid = integer(),
Affiliation = character(),
stringsAsFactors = F)
AuthorDF <- data.frame (aid = integer(),
LastName = character(),
FirstName = character(),
Initials = character(),
stringsAsFactors = F)
# AffJoinDF <- data.frame (aid = integer(),
#                           fid = integer(),
#                           stringsAsFactors = F)
SubmissionDateDF <- data.frame (pid = integer(),
Year = integer(),
Month = integer(),
Day = integer(),
stringsAsFactors = F)
ArticleDF <- data.frame (rid = character(),
ArticleTitle = character(),
ArticleDate = character(),
pid = integer(),
ISSN = integer(),
stringsAsFactors = F)
# AuthJoinDF <- data.frame (aid = integer(),
#                           rid = integer(),
#                           stringsAsFactors = F)
dataset <- "pubmed_sample.xml"
# Reading the XML file and parse into DOM
xmlDOM <- xmlParse(file = dataset) #added tree for learning
# get the root node of the DOM tree
r <- xmlRoot(xmlDOM)
#z <- xmlAttrs(xmlRoot(xmlDOM))
#xmlAttrs(xmlRoot(xmlDOM)[["variables"]])
PAnum <- xmlSize(r)
rowExists <- function (aRow, aDF)
{
# check if that address is already in the data frame
n <- nrow(aDF)
c <- ncol(aDF)
if (n == 0)
{
# data frame is empty, so can't exist
return(0)
}
for (a in 1:n)
{
# check if all columns match for a row; ignore the aID column
if (all(aDF[a,] == aRow[1,]))
{
# found a match; return it's ID
return(a)
}
}
# none matched
return(0)
}
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
parseJournalPub <- function (aJournalNode)
{
JournalIssue <- xmlChildren(aJournalNode)$JournalIssue
Date <- xmlChildren(JournalIssue)$PubDate
if(xmlSize(Date) >= 2){
Year1 <- xmlChildren(Date)$Year
Year <- xmlToList(xmlChildren(Date)$Year)
Month1 <- xmlChildren(Date)$Month
Month <- xmlToList(xmlChildren(Date)$Month)
Unformatted <- "NA"
} else {
dateList <- xmlToList(Date)
Unformatted <- dateList
if(nchar(dateList) > 4){
Month <- substrRight(dateList, 3)
} else { Month <- "NA"}
Year <- substr(dateList, 1, 4)
}
if(Month == "Jan"){ Month <- 1}
if(Month == "Feb"){ Month <- 2}
if(Month == "Mar"){ Month <- 3}
if(Month == "Apr"){ Month <- 4}
if(Month == "May"){ Month <- 5}
if(Month == "Jun"){ Month <- 6}
if(Month == "Jul"){ Month <- 7}
if(Month == "Aug"){ Month <- 8}
if(Month == "Sep"){ Month <- 9}
if(Month == "Oct"){ Month <- 10}
if(Month == "Nov"){ Month <- 11}
if(Month == "Dec"){ Month <- 12}
if(Month == "NA"){ Month <- 12}
ISSN1 <- xmlChildren(aJournalNode)$ISSN
ISSN2 <- xmlChildren(ISSN1)$text
ISSN <- xmlToList(ISSN2)
PubID <- "IPA"
DayNum = 30
newJournalPub.df <- data.frame(  PubID, Month, Year, DayNum, ISSN,stringsAsFactors = F)
return(newJournalPub.df)
}
parseJournal <- function (aJournalNode)
{
ISSN1 <- xmlChildren(aJournalNode)$ISSN
ISSN2 <- xmlChildren(ISSN1)$text
ISSN <- xmlToList(ISSN2)
JournalIssue <- xmlChildren(aJournalNode)$JournalIssue
Volume1 <- xmlChildren(JournalIssue)$Volume
Volume <- xmlToList(Volume1)
Issue1 <- xmlChildren(JournalIssue)$Issue
Issue <- xmlToList(Issue1)
PubDate <- "test" #will be a FK
jID = i
JournalTitle1 <- xmlChildren(aJournalNode)$Title
JournalTitle <- xmlToList(JournalTitle1)
newJournal.df <- data.frame( jID, ISSN, Volume, Issue, PubDate,  JournalTitle,
stringsAsFactors = F)
return(newJournal.df)
}
parseAffiliation <- function (anArticleNode)
{
AuthorList <- xmlChildren(anArticleNode)$AuthorList
Author <- xmlChildren(AuthorList)$Author
Affiliation1 <- xmlChildren(Author)$Affiliation
Affiliation <- xmlToList(Affiliation1)
#fid = Affiliation
newAffiliationDF <- data.frame( Affiliation, Affiliation, stringsAsFactors = F)
return(newAffiliationDF)
}
parseAffiliationJoin <- function (anArticleNode)
{
AuthorList <- xmlChildren(anArticleNode)$AuthorList
Author <- xmlChildren(AuthorList)$Author
Affiliation1 <- xmlChildren(Author)$Affiliation
Affiliation <- xmlToList(Affiliation1)
fid <-  Affiliation
n <- xmlSize(AuthorList)
# extract each of the <Item> nodes under <Items>
for (m in 1:n) #This doesn't iterate yet but could be useful
{
authorSelect <- AuthorList[m]
author <- authorSelect$Author
LastName2 <- xmlChildren(author)$LastName
LastName <- xmlToList(LastName2)
if(is_null(LastName)==TRUE){
LastName = ""
}
aid <- LastName
}
newAffiliationJoinDF <- data.frame( fid, aid, stringsAsFactors = F)
return(newAffiliationJoinDF)
}
parseAuthJoin <- function (anArticleNode)
{
MedlineCitation <- xmlChildren(anArticleNode)$MedlineCitation
Article <- xmlChildren(MedlineCitation)$Article
Title <- xmlChildren(Article)$ArticleTitle
ArticleTitle <- xmlToList(Title)
rid <- ArticleTitle
AuthorList <- xmlChildren(Article)$AuthorList
n <- xmlSize(AuthorList)
# extract each of the <Item> nodes under <Items>
for (m in 1:n) #This doesn't iterate yet but could be useful
{
authorSelect <- AuthorList[m]
author <- authorSelect$Author
LastName2 <- xmlChildren(author)$LastName
LastName <- xmlToList(LastName2)
if(is_null(LastName)==TRUE){
LastName = ""
}
aid <- LastName
}
newAffiliationJoinDF <- data.frame( fid, aid, stringsAsFactors = F)
return(newAffiliationJoinDF)
}
parseAuthors <- function (anAuthorNode)
{
newAuthor.df <- data.frame (
LastName = character(),
FirstName = character(),
Initials = character(),
stringsAsFactors = F)
AuthorList <- xmlChildren(Article)$AuthorList
n <- xmlSize(AuthorList)
# extract each of the <Item> nodes under <Items>
for (m in 1:n) #This doesn't iterate yet but could be useful
{
authorSelect <- AuthorList[m]
author <- authorSelect$Author
LastName2 <- xmlChildren(author)$LastName
LastName <- xmlToList(LastName2)
if(is_null(LastName)==TRUE){
LastName = ""
}
FirstName1 <- xmlChildren(author)$ForeName
FirstName <- xmlToList(FirstName1)
if(is_null(FirstName)==TRUE){
FirstName = ""
}
Initials1 <- xmlChildren(author)$Initials
Initials <- xmlToList(Initials1)
if(is_null(Initials)==TRUE){
Initials = ""
}
newAuthor.df[m,2] <- LastName
newAuthor.df[m,3] <- FirstName
newAuthor.df[m,4] <- Initials
#
#newAuthor.df <- data.frame( LastName, FirstName, Initials, stringsAsFactors = F)
}
return(newAuthor.df)
}
parseSubmissionDate <- function (aPubDateNode)
{
DateCreated <- xmlChildren(aPubDateNode)$DateCreated
Year1 <- xmlChildren(DateCreated)$Year
Year <- xmlToList(Year1)
Month1 <- xmlChildren(DateCreated)$Month
Month <- xmlToList(Month1)
Day1 <- xmlChildren(DateCreated)$Day
Day <- xmlToList(Day1)
# pid = 'S' + ISSN
pid = i
ISSN2<- xmlChildren(Journal)$ISSN
ISSN3 <- xmlChildren(ISSN2)$text
ISSN <- xmlToList(ISSN3)
newSubmissionDateDF <- data.frame( pid, Year, Month, Day, stringsAsFactors = F)
return(newSubmissionDateDF)
}
parseArticle <- function (anArticleNode)
{
MedlineCitation <- xmlChildren(anArticleNode)$MedlineCitation
Article <- xmlChildren(MedlineCitation)$Article
Title <- xmlChildren(Article)$ArticleTitle
ArticleTitle <- xmlToList(Title)
rid <- ArticleTitle
# Child P
PubmedData <- xmlChildren(anArticleNode)$PubmedData
ArticleIdList <- xmlChildren(PubmedData)$ArticleIdList
ArticleId <- xmlChildren(ArticleIdList)$ArticleId
#rid <- xmlToList(ArticleId)
ISSN1 <- xmlChildren(Article)$Journal
ISSN2<- xmlChildren(Journal)$ISSN
ISSN3 <- xmlChildren(ISSN2)$text
ISSN <- xmlToList(ISSN3)
ArticleDate = "tempDate"
#pid = 'S' + ISSN
pid = i
newArticle.df <- data.frame( rid, ArticleTitle, ArticleDate,  pid, ISSN,  stringsAsFactors = F)
return(newArticle.df)
}
for (i in 1:PAnum){
#for each node
aPA <- r[[i]]
#child medline
MedlineCitation <- xmlChildren(aPA)$MedlineCitation
#Child Article
Article <- xmlChildren(MedlineCitation)$Article
#Child Journal
Journal <- xmlChildren(Article)$Journal
# Child P
PubmedData <- xmlChildren(aPA)$PubmedData
#Helper functions
#JOURNALPUB
JournalPubDate <- parseJournalPub(Journal)
JPNode <- nrow(JournalPubDF) + 1
JournalPubDF[JPNode,1:ncol(JournalPubDF)] <- JournalPubDate[1,]
JournalPubDF[JPNode,1] <- JPNode
#JournalPubDF <- JournalPubDF[!duplicated(JournalPubDF$ISSN), ]
# JOURNAL
JournalNode <- parseJournal(Journal)
pk.JournalNode <- rowExists(JournalNode, JournalDF[,1:ncol(JournalDF)])
if(pk.JournalNode == 0){
JNode <- nrow(JournalDF) + 1
JournalDF[JNode,1:ncol(JournalDF)] <- JournalNode[1,]
JournalDF[JNode,1] <- JNode
}
JournalDF <- JournalDF[!duplicated(JournalDF$ISSN), ]
#AFFILIATION
Affiliation <- parseAffiliation(Article)
AFFNode <- nrow(AffiliationDF) + 1
AffiliationDF[AFFNode,1:ncol(AffiliationDF)] <- Affiliation[1,]
AffiliationDF[AFFNode,1] <- AFFNode
#AUTHORS
Authors <- parseAuthors(Article)
#for each row in author node
for(n in 1:nrow(Authors)){
#pk.AuthNode <- rowExists(Authors, AuthorDF[,1:ncol(AuthorDF)])
# set PK using PartNumber attribute in <item>
#if(pk.AuthNode == 0){
AuthNode <- nrow(AuthorDF) + 1
AuthorDF[AuthNode,1:ncol(AuthorDF)] <- Authors[1,]
AuthorDF[AuthNode,1] <- AuthNode
# }
}
#SubmissionDATE
SubmissionDate <- parseSubmissionDate(MedlineCitation)
SubNode <- nrow(SubmissionDateDF) + 1
SubmissionDateDF[SubNode,1:ncol(SubmissionDateDF)] <- SubmissionDate[1,]
SubmissionDateDF[SubNode,1] <- SubNode
#ARTICLE
Article <- parseArticle(aPA)
ArtNode <- nrow(ArticleDF) + 1
ArticleDF[ArtNode,1:ncol(ArticleDF)] <- Article[1,]
ArticleDF[ArtNode,1] <- ArtNode
#Remove Duplicates
AuthorDF <- AuthorDF[!duplicated(AuthorDF$LastName), ]
# #Aff Join
# AffiliationJoin <- parseAffiliationJoin(Article)
# AffJNode <- nrow(AffJoinDF) + 1
#   AffJoinDF[AffJNode,1:ncol(AffJoinDF)] <- AffiliationJoin[1,]
#   AffJoinDF[AffJNode,1] <- AffJNode
#AuthJoin
}
dbExecute(dbcon,
"DROP SCHEMA IF EXISTS starschema;" )
dbWriteTable(dbcon, "Author", AuthorDF, append = T)
dbWriteTable(dbcon, "Journal", JournalDF, append = T)
dbWriteTable(dbcon, "JournalPub", JournalPubDF, append = T)
dbWriteTable(dbcon, "SubmissionDate", SubmissionDateDF, append = T)
dbWriteTable(dbcon, "Affiliation", AffiliationDF, append = T)
dbWriteTable(dbcon, "Article", ArticleDF, append = T)
FactTableDF <- data.frame(
ISSN = character(),
ArticleCount = integer(),
DateDiscrepencyDF = integer(),
Published = character(),
stringsAsFactors = F)
DateDiscrepencyDF <- data.frame( ISSNDate = character(), Published = character(), Submitted = character(), Diff = integer())
ISSNDate <- sqldf("SELECT a.ISSN
From ArticleDF a")
DateDiscrepencyDF <- data.frame( ISSNDate)
DateDiscrepencyDF$Published <- paste(JournalPubDF$Year, JournalPubDF$Month, JournalPubDF$DayNum, sep="-") %>% ymd() %>% as.Date()
DateDiscrepencyDF$Submitted <- paste(SubmissionDateDF$Year, SubmissionDateDF$Month, SubmissionDateDF$Day, sep="-") %>% ymd() %>% as.Date()
DateDiscrepencyDF$Diff <- DateDiscrepencyDF$Published - DateDiscrepencyDF$Submitted
ftISSN <- sqldf("SELECT a.ISSN
From ArticleDF a
GROUP BY a.ISSN")
ftCount <- sqldf("SELECT COUNT(a.ISSN)
From ArticleDF a
GROUP BY a.ISSN")
ftDateDiscrepency <- sqldf("SELECT AVG(d.Diff)
FROM DateDiscrepencyDF d
GROUP BY d.ISSN")
ftPublished <- sqldf("SELECT d.Published
FROM DateDiscrepencyDF d
GROUP BY d.ISSN")
FactTableDF <- data.frame(ftISSN, ftCount, ftDateDiscrepency, ftPublished)
colnames(FactTableDF) <- c('ISSN','ArticleCount','dateDiscrepency', 'Published')
dbWriteTable(dbcon, "FactTableBase", FactTableDF, append = T)
dbExecute(dbcon,
"CREATE SCHEMA IF NOT EXISTS starschema;" )
dbExecute(dbcon,"USE starschema;")
dbExecute(dbcon,
"DROP TABLE IF EXISTS starschema.ArticleDim;" )
dbExecute(dbcon,
" DROP TABLE IF EXISTS starschema.JournalDim;
" )
dbExecute(dbcon,
" DROP TABLE IF EXISTS starschema.PublishedDim;
" )
dbExecute(dbcon,
" DROP TABLE IF EXISTS starschema.SubmittedDim;
" )
dbExecute(dbcon,
" DROP TABLE IF EXISTS starschema.FactTableDim;
" )
dbExecute(dbcon, "DROP TABLE IF EXISTS starschema.ArticlesPerJournal;")
starschema.ArticleDim <- dbExecute(dbcon,
" CREATE TABLE starschema.ArticleDim
AS SELECT rid AS Articledim_key,ArticleTitle,ArticleDate,pid,ISSN FROM PubMed.Article;" )
starschema.JournalDim <- dbExecute(dbcon,
" CREATE TABLE starschema.JournalDim
AS SELECT ISSN AS Journaldim_key, Volume, Issue FROM PubMed.Journal;" )
starschema.JournalDim <- dbExecute(dbcon,
" CREATE TABLE starschema.FactTableDim
AS SELECT ISSN AS FactTabledim_key, ArticleCount, dateDiscrepency, Published FROM PubMed.FactTableBase;" )
starschema.PublishedDim <- dbExecute(dbcon,
"CREATE TABLE starschema.PublishedDim(
Publisheddim_Key int NOT NULL AUTO_INCREMENT PRIMARY KEY,
day_num INT,
month_num INT,
year_num INT,
ISSN VARCHAR(10),
part_of_year VARCHAR(10)
);")
dbExecute(dbcon,
"INSERT INTO starschema.PublishedDim (month_num, year_num, day_num, ISSN, part_of_year)
SELECT Month AS month_num, Year AS year_num, DayNum as day_num, ISSN as ISSN,
CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END
From PubMed.JournalPub;
" )
starschema.SubmittedDim <- dbExecute(dbcon,
"  CREATE TABLE starschema.SubmittedDim(
Submissiondim_key int NOT NULL AUTO_INCREMENT PRIMARY KEY,
day_num INT,
month_num INT,
year_num INT,
part_of_year VARCHAR(20)
);" )
dbExecute(dbcon,
"INSERT INTO starschema.SubmittedDim (month_num, year_num, day_num, part_of_year)
SELECT Month AS month_num, Year AS year_num, Day as day_num,
CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END
From PubMed.SubmissionDate;" )
dbExecute(dbcon,
" CREATE TABLE starschema.ArticlesPerJournal (
FactTabledim_key INT,
Publisheddim_Key INT,
CONSTRAINT PRIMARY KEY (FactTabledim_key, Publisheddim_Key )
);" )
Season <- sqldf( "
SELECT Month, ISSN as ISSN,
CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END
From JournalPubDF
Group BY ISSN;")
FactTableDF$Season <- Season$`CASE
WHEN Month < 12 AND Month > 8 THEN 'Fall'
WHEN Month < 9 AND Month > 5 THEN 'Summer'
WHEN Month < 6 AND Month > 2 THEN 'Spring'
When Month < 3 THEN 'Winter'
ELSE 'Winter'
END`
FactTableDF <-FactTableDF[!(FactTableDF$dateDiscrepency<0 | FactTableDF$dateDiscrepency==0),]
FactTableDF
SeasonToPublish <- sqldf( "
SELECT Season, Count(Season)
From FactTableDF
Group BY Season;")
SeasonToPublish
